
@model WarehouseApp.Models.ViewModels.PuchaseViewModel

@{
    ViewBag.Title = "Edit Purchase";
    var today = DateTime.Now;
}
<div class="submit-progress hidden">
    <i class="fa fa-2x fa-spinner fa-spin"></i>
    @*<img src="~/Content/Images/ajax-loading.gif" />*@
    <label>Please wait ...</label>
</div>
@using (Html.BeginForm("EditPurchase", "Purchase", null, FormMethod.Post, new { @id = "EditPurchaseForm" }))
{
    @Html.AntiForgeryToken()
        
    <div class="row centered-form">
        <div class="col-xs-12 col-sm-10 col-md-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title"><i class="fa fa-pencil"></i> Edit Purchase (@Model.PurchaseNumber)</h3>
                </div>
                <div class="panel-body">
                    @Html.ValidationSummary(true)

                    @Html.Hidden("SelectedProductId")
                    <div class="row form-group">

                        <div class="col-lg-3 paddingReduce">
                            @Html.LabelFor(model => model.PurchaseDate, new { @class = "required-label control-label col-md-12" })
                            <div class="col-md-12 paddingReduce input-group " style="padding-left:15px">
                                @Html.TextBox("PurchaseDate", string.Format("{0:dd-MM-yyyy}", DateTime.Now), new { @class = "form-control input-sm rfwDatepicker", @Value = string.Format("{0:dd-MM-yyyy}", Model.PurchaseDate) })
                                <span class="input-group-addon rfwDatepickerIcon"><i class="glyphicon glyphicon-calendar"></i></span>
                            </div>
                        </div>

                        <div class="col-lg-7 paddingReduce">
                            @Html.LabelFor(model => model.PurchaseProducts.First().Product, new { @class = "required-label control-label col-md-12" })

                            <div class="col-md-12 paddingReduce">
                                @Html.TextBox("Product", null, new { @class = "form-control input-sm", placeholder = "Product name type here" })
                                @Html.ValidationMessageFor(model => model.PurchaseProducts.First().Product.ProductFullName)
                            </div>

                        </div>
                    </div>


                    <div class="row form-group">
                        <div class="col-lg-3 paddingReduce">
                            @Html.Label("Expiry Date", new { @class = "control-label col-md-12" })
                            <div class="col-md-12 paddingReduce input-group " style="padding-left:15px">
                                @Html.TextBox("ExpiryDate", null, string.Format("{0:dd-MM-yyyy}", today), new { @class = "form-control input-sm rfwDatepicker" })
                                <span class="input-group-addon rfwDatepickerIcon"><i class="glyphicon glyphicon-calendar"></i></span>
                            </div>
                        </div>
                        <div class="col-lg-2 paddingReduce">
                            @Html.LabelFor(model => model.PurchaseProducts.First().UnitPrice, new { @class = "required-label control-label col-md-12" })
                            <div class="col-md-12 paddingReduce">
                                @Html.TextBox("UnitPrice",null, new { @class = "form-control input-sm", placeholder = "Purchase price" })
                                @Html.ValidationMessageFor(model => model.PurchaseProducts.First().UnitPrice)
                            </div>

                        </div>
                        <div class="col-lg-2 paddingReduce">
                            @Html.LabelFor(model => model.PurchaseProducts.First().Quantity, "Quantity", new { @class = "required-label control-label col-md-12" })
                            <div class="col-md-12 paddingReduce">
                                <input type="text" class="form-control input-sm" name="TotalQuantity" id="TotalQuantity">
                                @*@Html.TextBox("TotalQuantity",null, new { @class = "form-control input-sm", placeholder = "Quantity" })*@
                                @Html.ValidationMessageFor(model => model.PurchaseProducts.First().Quantity)
                            </div>

                        </div>

                        <div class="col-lg-3 paddingReduce">
                            @Html.LabelFor(model => model.PurchaseProducts.First().TotalPrice, new { @class = "required-label control-label col-md-12" })
                            <div class="col-md-12 paddingReduce">
                                @Html.TextBox("TotalPrice",null, new { @class = "form-control input-sm", placeholder = "Total Price", @readonly = true })

                            </div>
                        </div>
                        <div class="col-lg-2 paddingReduce">
                            <label>&nbsp;</label>
                            <div class="col-md-12 paddingReduce">
                                <input type="button" value="Add product" class="btn btn-info btn-sm" id="addProduct" />

                            </div>

                        </div>
                    </div>
                 

                    </div>
                </div>
            </div>
        </div>   


<table class="table table-striped table-bordered table-hover table-condensed" id="productTable">
    <thead>
        <tr>            
            <th class="col-md-5">Product</th>    
            <th class="col-md-2">Unit Price</th>           
            <th class="col-md-2">Quantity</th> 
            <th class ="col-md-2">Total Price</th>
            <th class="col-md-1">Action</th>
        </tr>
    </thead>
    <tbody>
       @if (Model.PurchaseProducts.Count > 0)
       {
           foreach (var item in Model.PurchaseProducts)
        {
            <tr>
                <td class="hidden purchaseDate">@Model.PurchaseDate</td>
                <td class="hidden productId">@item.ProductId</td>
                <td class="col-md-5">@item.Product.ProductFullName</td>
                <td class="col-md-2 unitPrice">@item.UnitPrice</td>
                <td class="col-md-2 pices">@item.Quantity</td>
                <td><span class="col-md-2 totalprice">@item.TotalPrice</span></td>
                <td class="col-md-1"><span class=" btn btn-xs btn-danger remove">Remove</span></td>
            </tr>
        }
       }
    </tbody>
    <tfoot>
        <tr>           
            <th class="col-md-5">Product</th>
            <th class="col-md-2">Unit Price</th>
            <th class="col-md-2">Quantity</th>
            <th class="col-md-2">Total Price</th>
            <th class="col-md-1">Action</th>
        </tr>
    </tfoot>
</table>


    <table class="table table-striped table-bordered table-hover">
        <tr>
            @{
                double? total = 0;
                if (Model.PurchaseProducts.Count > 0) 
                {
                    total = Model.PurchaseProducts.ToList().Sum(x => x.TotalPrice);
                }
                
                
            }       
            <th colspan="12">Net Total</th>
            <th colspan="12"><span id="FinalTotal">@total</span></th>     
        </tr>

        <tr>


        <tr>
            <th colspan="6">
                
                @Html.LabelFor(model => model.SupplierId, "Supplier", new { @class = "required-label" })
            </th>
            <th>@Html.HiddenFor(model => model.PurchaseId)
                @Html.DropDownList("supplier", null, "--Select Supplier--", new { @class = "required-label form-control" })
                @Html.ValidationMessageFor(model => model.SupplierId)
            </th>
            <th colspan="6">
                @Html.LabelFor(model => model.PurchaseDiscount)
            </th>
            <th>
                @Html.TextBoxFor(model => model.PurchaseDiscount, new { @class = "form-control input-sm", placeholder = "Discount", })
                @Html.ValidationMessageFor(model => model.PurchaseDiscount)
            </th>

          
        
            </tr>
        <tr>
            <th colspan="6">
                @Html.LabelFor(model => model.PaidAmount, new { @class = "required-label" })
            </th>
            <th>
              
                @Html.TextBoxFor(model => model.PaidAmount, new { @class = "form-control input-sm", placeholder = "Paid Amount"}) 
                @Html.ValidationMessageFor(model => model.PaidAmount)
            </th>
            <th colspan="6">
                @Html.LabelFor(model => model.PurchaseCost)
            </th>
            <th>
                @Html.TextBoxFor(model => model.PurchaseCost, new { @class = "form-control input-sm", placeholder = "Purchase Cost" })
                @Html.ValidationMessageFor(model => model.PurchaseCost)
            </th>  
      
           
        </tr>
        <tr>
            @{
                double due = 0;
                double grand = 0;
                due = Convert.ToDouble(Model.TotalPurchasePrice) - Convert.ToDouble(Model.PaidAmount);
                grand = Convert.ToDouble(Model.TotalPurchasePrice) + Convert.ToDouble(Model.PurchaseCost);
            }
            <th colspan="6">Due Amount</th>
            <th><input type="text" class="form-control input-sm" name="remaining" id="remaining" readonly value=@due></th>
            <th colspan="6">
                @Html.LabelFor(model => model.PaidPurchaseCost)
            </th>
            <th>
                @Html.TextBoxFor(model => model.PaidPurchaseCost, new { @class = "form-control input-sm", placeholder = "Purchase Cost Paid Amount" })
                @Html.ValidationMessageFor(model => model.PaidPurchaseCost)
            </th>
           
        </tr>
        <tr>
            
          
            <th colspan="6">Grand Total</th>
            <th><input type="text" name="finalValue" class="form-control input-sm" id="FinalValue" readonly value=@grand></th>
            <th colspan="6">Purchase Cost Due</th>
            <th><input type="text" class="form-control input-sm" name="remainingPc" id="remainingPc" readonly value=0></th>
        </tr>
        <tr>
            <th colspan="6">
                @Html.LabelFor(model => model.TransactionMode, new { @class = "required-label" })
            </th>
            <th>
                @Html.DropDownList("TransactionMode", null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TransactionMode)
             </th>
            <th colspan="6">
                @Html.LabelFor(model => model.PcTransactionMode)
            </th>
            <th>
                @Html.DropDownList("PcTransactionMode", null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PcTransactionMode)
            </th>
        </tr>
        <tr>

            <th colspan="6">
                @Html.LabelFor(model => model.TransactionModeId, "Account", new { @class = "required-label" })
            </th>
            <th>
                @Html.DropDownList("TransactionModeId", null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TransactionModeId)
            </th>
            <th colspan="6">
                @Html.LabelFor(model => model.PcTransactionModeId, "Account")
            </th>
            <th>
                @Html.DropDownList("PcTransactionModeId", null, "Please Select Account..", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PcTransactionModeId)
            </th>
        </tr>
    </table>
   <div class="">
            @*<input type="button" class="btn btn-success pull-right fa fa-save" value="Save Purchase" id="addPurchase" />*@
            <button type="button" class="btn btn-primary col-md-offset-4" title="Save Purchase" id="savePurchase"><i class="fa fa-save"></i> Update Purchase</button>
           
            <a href='@Url.Action("Index","Purchase")' data-toggle="tooltip" title="" class="btn btn-default" data-original-title="Cancel"><i class="fa fa-reply"></i> Cancel</a>
        </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/ShopScript")
<script src="~/Scripts/ProjectJs/Shop/PurchaseScript.js" type="text/javascript"></script>
    <script>
        $(document).ready(function() {
            $('#addProduct').on('click', function() {
                purchaseAddProduct();
            });
            $('.remove').on('click', function () {
                $(this).closest('tr').remove();
                finalTotal();
            });
            $('#TransactionMode').change(function() {
                $('#TransactionModeId').empty();
                var value = $(this).val();
                var paramData = { TransactionMode: value };
                var url = '@Url.Action("GetAccountByMode", "BankAccount")';
                getDataShop(url, paramData, 'getAccountNo');
            });
            $('#PcTransactionMode').change(function() {
                $('#PcTransactionModeId').empty();
                var value = $(this).val();
                var paramData = { TransactionMode: value };
                var url = '@Url.Action("GetAccountByMode", "BankAccount")';
                getDataShop(url, paramData, 'getAccountNoForPurchaseCost');
            });

            $('#Product').focus(function() {
                var url = '@Url.Action("GetProuctForPurchase", "Product")';
                AutoCompleteProductName('#Product', url);

            });

           

            $('#TotalQuantity').on('keyup', function() {
                totalPriceProduct();
            });


            $('#UnitPrice').on('keyup', function() {
                totalPriceProduct();
            });
            $('#PurchaseDiscount').on('keyup', function () {

                purchaseDiscountChangeEffect();
            });
            $('#PurchaseCost').on('keyup', function() {
                purchaseCostChangeEffect();
            });
            $('#PaidPurchaseCost').on('keyup', function () {
                paidPurchaseCostChangeEffect();
            });

            $('#PaidAmount').on('keyup', function() {
                paidAmountChangeEffect();
            });

            $('#savePurchase').on('click', function () {
                //var data = [];
                //$('#productTable tbody').find('tr').each(function (rowIndex, r) {
                //    var cols = [];
                //    $(this).find('td').each(function (colIndex, c) {
                //        cols.push(c.textContent);
                //    });
                //    data.push(cols);
                //});
                var purchaseId = $('#PurchaseId').val();
                var purchaseDate = $('#PurchaseDate').val();
                var transactionMode = $('#TransactionMode option:selected').val();
                var pcTransactionMode = $('#PcTransactionMode option:selected').val();
                var transactionModeId = $('#TransactionModeId option:selected').val();
                var pcTransactionModeId = $('#PcTransactionModeId option:selected').val();
                var purchsDiscount = isNonNegativeNumber($('#PurchaseDiscount').val().trim()) == false ? 0 : parseFloat($('#PurchaseDiscount').val().trim());
               
                var purchaseCost = isNonNegativeNumber($('#PurchaseCost').val().trim()) == false ? 0 : parseFloat($('#PurchaseCost').val().trim());
                var paidAmount = isNonNegativeNumber($('#PaidAmount').val().trim()) == false ? 0 : parseFloat($('#PaidAmount').val().trim());
                var paidPurchaseCost = isNonNegativeNumber($('#PaidPurchaseCost').val().trim()) == false ? 0 : parseFloat($('#PaidPurchaseCost').val().trim());
                var supplier = $('#supplier option:selected').val();
                var productIds = [];
                var expiryDates = [];
                var totalQuantities = [];
                var unitPrices = [];
                var totalQuantity = [];
                var totalPrices = [];
                var count = 0;

                $('#productTable tbody').find('tr').each(function() {
                    productIds.push($(this).find('.productId').text().trim());
                    expiryDates.push($(this).find('.expiryDate').text().trim());
                    totalQuantities.push($(this).find('.pices').text().trim());
                    unitPrices.push($(this).find('.unitPrice').text().trim());
                    totalQuantity.push($(this).find('.totalQuantity').text().trim());
                    totalPrices.push($(this).find('.totalprice').text().trim());
                    count++;
                });

                var purchaseProducts = [];

                for (var i = 0; i <= count; i++) {
                    purchaseProducts.push({ ProductId: productIds[i], TotalQuantity: totalQuantities[i], UnitPrice: unitPrices[i], TotalPrice: totalPrices[i], ExpiryDate: expiryDates[i] });
                }
                var data = { PurchaseId: purchaseId, PurchaseProducts: purchaseProducts, PurchaseDate: purchaseDate, SupplierId: supplier, TransactionMode: transactionMode, TransactionModeId: transactionModeId, PcTransactionMode: pcTransactionMode, PcTransactionModeId: pcTransactionModeId, PurchaseDiscount: purchsDiscount, PurchaseCost: purchaseCost, PaidPurchaseCost: paidPurchaseCost, PaidAmount: paidAmount };
                //console.log(data);
                if (purchaseDate == '' || supplier == '' || productIds.length === 0 || transactionModeId=='') {
                    $.alert("Please enter required field value", '<i class="fa fa-exclamation-circle" aria-hidden="true"> Alert</i>');
                } else {
                    if (purchaseCost>0&& pcTransactionModeId == '') {
                        $.alert("Please enter all required field value", '<i class="fa fa-exclamation-circle" aria-hidden="true"> Alert</i>');
                    } else {

                        var paramData = { data: data };
                        var url = '@Url.Action("SaveEditedPurchase", "Purchase")';
                        $.confirm({
                            title: '<i class="fa fa-exclamation-circle"></i> Confirmation',
                            content: 'Are you sure want to update purchase? ',
                            confirmButton: "Yes",
                            cancelButton: "No",
                            confirm: function () {
                                //$('#savePurchase').html('<i class="fa fa-spinner fa-lg fa-spin"></i> Saving').prop("disabled", true);
                                DisplayProgressMessage('#savePurchase', 'Saving..');
                                SavePurchaseProduct(url, paramData, 'savePurchase');
                            },
                            cancel: function () {

                            }
                        });
                        
                    }
                    
                }
            });


          
        });


    </script>
}
@*//=======================================================================================//
    //Author : Md. Mahid Choudhury
    //Creation Date : January 2017
    //=======================================================================================//*@